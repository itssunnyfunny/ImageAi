// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String @id @default(uuid())
  username         String
  profilePicture   String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

  enum modelTraningStatusEnum {
    Pending
    Generated
    Failed
  }

model Model {
  id                 String @id @default(uuid())
  name               String 
  age                Int
  type               ModelTypeEnum
  Ethenecity         EthenecityEnum
  eyeColor           eyeColorEnum
  bald               Boolean
  triggerWords        String?
  tensorPath        String?
  trainingStatus     modelTraningStatusEnum @default(Pending)
  trainingImages     TrainingImages[]
  outputImages       OutputImages[]
  userId             String
  falAiRequestId    String?
  status            modelTraningStatusEnum @default(Pending)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  @@index([falAiRequestId])
}

model TrainingImages {
  id                   String @id @default(uuid())
  imageUrl             String
  modelId              String
  model                Model      @relation(fields: [modelId], references: [id])
}

model OutputImages {
  id                   String @id   @default(uuid())
  imageUrl             String
  modelId              String
   model               Model      @relation(fields: [modelId], references: [id])
   userId              String
   prompt              String
   falAiRequestId    String?
   status              OutputIMageStatusEnum @default(Pending)
   createdAt           DateTime @default(now())
  updatedAt            DateTime @updatedAt
  @@index([falAiRequestId])
}

model Packs {
  id         String @id @default(uuid())
  name       String
  prompts    PackPrompts[]
}

model PackPrompts {
  id           String @id @default(uuid())
  prompt       String
  packId       String
  pack         Packs    @relation(fields: [packId], references: [id])
}

  enum ModelTypeEnum {
    Man 
    Woman
    Other
  }
  enum EthenecityEnum {
   
        White
        Black
         Asian_American
         East_Asian
         South_East_Asian
        South_Asian
         Middle_Eastern
        Pacific
        Hispanic
   
  }

  enum eyeColorEnum {
    Brown
    Blue
    Black
    Grey
    Green
    Hazel
  }
  enum OutputIMageStatusEnum {
    Pending
    Generated
    Failed
  }
